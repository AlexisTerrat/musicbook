--- Ressources ---

Session: { -> store that in redis would be the best
  id: string,
  token: string, // this will be set as cookie
  userId: User.id, // undefined if guest session
  expire: int // epoch time
}

User: {
  id: string,
  email: string,
  tags: [Tag.id]
}

Credentials: {
  id: string,
  userId: User.id,
  hash: string,
  salt: string
}

Item: {
  id: string,
  userId: User.id,
  artist: string, // optional
  album: string, // optional
  title: string,
  links: [string], // optional, default to []
  tags: [Tag.id] // optional, default to []
}

Tag: {
  id: string,
  userId: User.id,
  name: string
}

==========================================================

--- User ---
  GET /api/user/:id
    return User
  POST /api/user
    body: User (without id)
    return User (with id)
  PUT /api/user/:id
    body: User
  DELETE /api/user/:id

--- Tag ---
  GET /api/user/:id/tag
    return [Tag]
  GET /api/user/:id/tag/:id
    return Tag
  POST /api/user/:id/tag
    body: Tag (without id)
    return: Tag (with id)
  PUT /api/user/:id/tag/:id
    body: Tag
  DELETE /api/user/:id/tag/:id

--- Item ---
  GET /api/user/:id/item
    return [Item]
  GET /api/user/:id/item/:id
    return Item
  GET /api/user/:id/item/:id/tag
    return [Tag]
  POST /api/user/:id/item
    body: Item (without id)
    return Item (with id)
  PUT /api/user/:id/item/:id
    body: Item
  DELETE /api/user/:id/item/:id
  POST /api/user/:id/item/:id/tag/:id
  DELETE /api/user/:id/item/:id/tag/:id

--- Session Management ---
  POST /api/login -> if successful expires current session and creates a new one (as user)
    body: Credentials { email, password }
    return: User
  POST /api/logout -> expires current session and creates a new one (as guest)
  POST /api/signup
    body: Credentials { email, password }

Notes:
- except for /signup & /login, all other request must be made by a logged user.
